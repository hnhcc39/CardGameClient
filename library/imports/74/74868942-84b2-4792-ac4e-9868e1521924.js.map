{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "//处理对战流程的关键类\r\n\r\nconst Player = require('player');\r\n\r\nvar tempDeck = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L'];\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n        \r\n        cardPrefab: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n\r\n        //自己\r\n        localPlayer: {\r\n            default: null,\r\n            type: Player\r\n        },\r\n        \r\n        //对手\r\n        opponentPlayer: {\r\n            default: null,\r\n            type: Player\r\n        },\r\n\r\n        turn: 0,    //当前双方总回合数\r\n        turnPhase: 0,   //行动状态\r\n        \r\n        //状态相关\r\n        enterTurnFunc: {\r\n            default: []\r\n        },\r\n        \r\n        turnFunc: {\r\n            default: []\r\n        },\r\n        \r\n        leaveTurnFunc: {\r\n            default: []\r\n        },\r\n    },\r\n    \r\n    setInputControl: function() {\r\n        var self = this;\r\n        this.node.on('touchstart', function(event) {\r\n            cc.log('1231312321313213123');\r\n            cc.log(event.getLocationX());\r\n        }, this);\r\n\r\n    },\r\n    \r\n    //开始游戏\r\n    startGame: function() {\r\n        //玩家初始化\r\n        this.localPlayer.init(this);\r\n        this.opponentPlayer.init(this);\r\n        \r\n        //根据牌池生成卡组\r\n        this.localPlayer.createDeck(tempDeck);\r\n        this.opponentPlayer.createDeck(tempDeck);\r\n        \r\n        //初始化对手player,\r\n        this.localPlayer._opponentPlayer = this.opponentPlayer;\r\n        this.opponentPlayer._opponentPlayer = this.localPlayer;\r\n        \r\n        var isFirstPlayer = true;   //先手后手\r\n        \r\n        if(isFirstPlayer)\r\n        {\r\n            this.turnPlayer = this.localPlayer;\r\n            this.turnOpponent = this.opponentPlayer;\r\n        }\r\n        else\r\n        {\r\n            this.turnPlayer = this.opponentPlayer;\r\n            this.turnOpponent = this.localPlayer;            \r\n        }\r\n        \r\n        this.turn = 1;\r\n        \r\n        this.turnPlayer.drawDeck(3);\r\n        this.turnOpponent.drawDeck(3);\r\n        this.changePhase(PHASE_BEGIN_TURN);\r\n        \r\n       //showTipLabel('开始游戏');\r\n    },\r\n    \r\n    //交换行动\r\n    turnPlayerChange: function() {\r\n        //cc.log('turnPlayerChange, turnPlayer:%s, turnOpponent:%s', this.turnPlayer.heroName, this.turnOpponent.heroName);\r\n        var tempPlayer = this.turnPlayer;\r\n        //cc.log('tempPlayerName:%s', tempPlayer.heroName);\r\n        this.turnPlayer = this.turnOpponent;\r\n        //cc.log('turnPlayer:%s', this.turnPlayer.heroName);\r\n\r\n        this.turnOpponent = tempPlayer;\r\n        //cc.log('turnopponent:%s', this.turnOpponent.heroName);\r\n\r\n    },\r\n    \r\n    //随从攻击玩家\r\n    monsterAtkPlayer: function(monster, player) {\r\n        if(!monster || monster.atk <= 0 || monster.isAtked === true)\r\n            return;\r\n                \r\n        monster.isAtked = true;\r\n        player.reduceHp(monster.atk);\r\n        player.refreshMonsterField();\r\n        \r\n        showTipLabel(monster._player.heroName + '的' + monster.cardName + ' 攻击了玩家 ' + player.heroName);\r\n\r\n        this.checkWin();\r\n    },\r\n    \r\n    //随从攻击随从\r\n    monsterAtkMonster: function(src, dest) {\r\n        if(!src || !dest || src.atk <= 0 || src.isAtked === true)\r\n            return;\r\n    \r\n        src.isAtked = true;\r\n        var damage = src.atk;\r\n        dest.reduceHp(damage);\r\n        \r\n        damage = dest.atk;\r\n        src.reduceHp(damage);\r\n        \r\n        showTipLabel(src._player.heroName + '的' + src.cardName + ' 攻击了 ' + dest._player.heroName + '的' + dest.cardName, cc.Color.RED);\r\n    },\r\n    \r\n    //判断输赢\r\n    checkWin: function() {\r\n        if(this.turnPlayer.hp <= 0 && this.turnOpponent.hp <= 0)\r\n        {\r\n            showTipLabel(\"平局\");\r\n        }\r\n        else if(this.turnPlayer.hp <= 0)\r\n        {\r\n            showTipLabel(\"%s 胜利\", this.opponentPlayer.heroName);\r\n        }\r\n        else if(this.turnOpponent.hp <= 0)\r\n        {\r\n            showTipLabel(\"% 胜利\", this.turnPlayer.heroName);\r\n        }\r\n    },\r\n    \r\n    //回合结束（按钮调用）\r\n    turnEnd: function() {\r\n        //不是MainPhase这个按钮不能按\r\n        if(this.turnPhase !== PHASE_MAIN_TURN)\r\n            return;\r\n            \r\n        this.changePhase(PHASE_END_TURN);\r\n    },\r\n  \r\n    enterBeginTurn: function() {\r\n        cc.log('is enter BeginTurn?');\r\n        ++this.turn;\r\n        this.turnPlayerChange();\r\n        \r\n        showTipLabel(this.turnPlayer.heroName + '的回合');\r\n        this.turnPlayer.setTurnActive(true);    //可以行动\r\n        this.turnPlayer.criticalPlus(1);        //增加水晶\r\n        this.turnPlayer.criticalRecover();      //回复水晶\r\n        this.turnPlayer.awakenMonster();        //重置随从攻击次数\r\n        this.turnPlayer.drawDeck(1);            //抽1张卡\r\n        \r\n    },\r\n    \r\n    beginTurn: function(){\r\n        //进入主流程\r\n        \r\n        this.changePhase(PHASE_MAIN_TURN);\r\n    },\r\n    \r\n    leaveBeginTurn: function() {\r\n\r\n    },\r\n    \r\n    enterMainTurn: function() {\r\n        \r\n    },\r\n    \r\n    mainTurn: function(){\r\n        \r\n    },\r\n    \r\n    leaveMainTurn: function() {\r\n        \r\n    },\r\n    \r\n    enterEndTurn: function() {\r\n        \r\n    },\r\n    \r\n    endTurn: function(){\r\n        this.changePhase(PHASE_BEGIN_TURN);\r\n    },\r\n    \r\n    leaveEndTurn: function() {\r\n        \r\n        this.turnPlayer.setTurnActive(false);\r\n    },\r\n        \r\n    changePhase: function(nextTurnType) {\r\n        if(this.turnPhase !== 0)\r\n        {\r\n            this.leaveTurnFunc[this.turnPhase]();\r\n        }\r\n        \r\n        this.enterTurnFunc[nextTurnType]();\r\n        this.turnPhase = nextTurnType;\r\n    },\r\n    \r\n    // use this for initialization\r\n    onLoad: function () {\r\n        //this.setInputControl();\r\n        //\r\n        this.enterTurnFunc[PHASE_BEGIN_TURN] = this.enterBeginTurn.bind(this);\r\n        this.enterTurnFunc[PHASE_MAIN_TURN] = this.enterMainTurn.bind(this);\r\n        this.enterTurnFunc[PHASE_END_TURN] = this.enterEndTurn.bind(this);\r\n\r\n        this.turnFunc[PHASE_BEGIN_TURN] = this.beginTurn.bind(this);\r\n        this.turnFunc[PHASE_MAIN_TURN] = this.mainTurn.bind(this);\r\n        this.turnFunc[PHASE_END_TURN] = this.endTurn.bind(this);\r\n        \r\n        this.leaveTurnFunc[PHASE_BEGIN_TURN] = this.leaveBeginTurn.bind(this);\r\n        this.leaveTurnFunc[PHASE_MAIN_TURN] = this.leaveMainTurn.bind(this);\r\n        this.leaveTurnFunc[PHASE_END_TURN] = this.leaveEndTurn.bind(this);\r\n        \r\n\r\n    },\r\n\r\n    start: function() {\r\n        this.startGame();\r\n    },\r\n    \r\n    // called every frame, uncomment this function to activate update callback\r\n    update: function (dt) {\r\n        this.turnFunc[this.turnPhase]();\r\n    },\r\n});\r\n"
  ]
}