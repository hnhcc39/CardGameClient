{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "//网络连接单例\r\nconst EventProcess = require('EventProcess');\r\n\r\nvar CLIENT_STATE_DISCONNECT = -1;\r\nvar CLIENT_STATE_GUIDE = 0;\r\nvar CLIENT_STATE_LOGININ = 1;\r\nvar CLIENT_STATE_DISBAND = 2;\r\n\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n    },\r\n    \r\n    //account结构\r\n    //function Account(account, password){\r\n    //    this.account = account;\r\n    //    this.password = password;\r\n    //}\r\n\r\n    statics: {\r\n        socket : null, //socket.io连接\r\n        clientId : -1,  //连接编号\r\n        account: null,  //服务器传回来的账号信息\r\n        state: CLIENT_STATE_DISCONNECT,  //账号状态\r\n        \r\n        //初始化SOCKETIO\r\n        init: function() {\r\n            if(cc.sys.isNative) {\r\n                window.io = SocketIO;\r\n            }\r\n            else {\r\n                window.io = require('socket.io');\r\n            }\r\n        },\r\n        \r\n        //为EventPRocess设置duel\r\n        setDuel: function(duel) {\r\n            EventProcess.setDuel(duel);    \r\n        },\r\n        \r\n        //连接服务器\r\n        connectToServer: function() {\r\n            if(this.socket || this.state !== CLIENT_STATE_DISCONNECT)\r\n            {\r\n                cc.log('已经与服务器建立连接，不要重复连接');\r\n                return;\r\n            }\r\n            \r\n            this.socket = window.io('http://localhost:3000');\r\n            EventProcess.init(this);\r\n        },\r\n        \r\n        //服务器连接成功\r\n        connectSuccess: function(idx) {\r\n            this.setClientId(idx);\r\n            this.state = CLIENT_STATE_GUIDE;\r\n        },\r\n                \r\n        //账号登录\r\n        login: function(account, password) {\r\n            if(!this.socket || this.state === CLIENT_STATE_DISCONNECT)\r\n            {\r\n                cc.log(\"服务器根本没有连上……无法登录\");\r\n                return;\r\n            }\r\n            \r\n            if(this.state === CLIENT_STATE_LOGININ)\r\n            {\r\n                cc.log('已经登录账号，请不要重复登录');\r\n                return;\r\n            }\r\n            \r\n            if(this.state === CLIENT_STATE_DISBAND)\r\n            {\r\n                cc.log('您已被服务器ban,无法登录');\r\n                return;\r\n            }\r\n            \r\n            cc.log(\"准备账号登录，账号为：%s, 密码：%s\", account, password);\r\n            this.socket.emit(CW_LOGIN_REQUEST, {'AccountName': account, 'password': password});\r\n        },\r\n        \r\n        //登录成功\r\n        loginSuccess: function(account) {\r\n            this.account = account;\r\n            this.state = CLIENT_STATE_LOGININ;\r\n        },\r\n        \r\n        //给客户端发送消息\r\n        sendPacket: function(msgID, param) {\r\n            this.socket.emit(msgID, param);\r\n        },\r\n        \r\n        //注册服务器事件函数\r\n        registerHandler: function(msgID, func) {\r\n            this.socket.on(msgID, func);\r\n        },\r\n        \r\n        //服务器断开连接事件\r\n        disconnect: function() {\r\n            console.log('server disconnected, my idx:', this.clientId);\r\n            \r\n            //初始化\r\n            //this.socket = null;\r\n            this.clientId = -1;\r\n            this.account = null;\r\n            this.state = CLIENT_STATE_DISCONNECT;\r\n            \r\n            //如果在战斗中，进行一些其他处理\r\n        },\r\n\r\n        //设置clientId\r\n        setClientId: function(idx) {\r\n            this.clientId = idx;  \r\n        },\r\n        \r\n        //获取账号名字\r\n        getAccountName: function() {\r\n            if(this.account)\r\n                return this.account.account;\r\n            else\r\n                return null;\r\n        },\r\n\r\n        \r\n    },\r\n    \r\n    // use this for initialization\r\n    onLoad: function () {\r\n\r\n    },\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    // update: function (dt) {\r\n\r\n    // },\r\n});\r\n"
  ]
}