{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n        srcPos: {\r\n            default: {}\r\n        },\r\n        \r\n        _player: null,  //Player引用\r\n        _idx: 0,        //数组索引\r\n        \r\n        //-----------------------控件-------------------------------------\r\n        hpLabel: {\r\n            default: null,\r\n            type: cc.Label\r\n        },\r\n        \r\n        atkLabel: {\r\n            default: null,\r\n            type: cc.Label\r\n        },\r\n        \r\n        nameLabel: {\r\n            default: null,\r\n            type: cc.Label\r\n        },\r\n    },\r\n\r\n    setInputControl: function() {\r\n        this.node.on('touchstart', function(event) {\r\n            cc.log(this.isAtked());\r\n            if(!this.isTurnActive() || this.isAtked())\r\n                return;\r\n            \r\n            this.srcPos.x = this.node.x;\r\n            this.srcPos.y = this.node.y;\r\n            //cc.log('srcX:%d', this.srcPos.x);\r\n        }, this);\r\n        \r\n        this.node.on('touchmove', function(event) {\r\n            if(!this.isTurnActive() || this.isAtked())\r\n                return;\r\n            \r\n            var moveX = event.getLocationX() - event.getStartLocation().x;\r\n            var moveY = event.getLocationY() - event.getStartLocation().y;\r\n            this.node.setPosition(this.srcPos.x+moveX, this.srcPos.y+moveY);\r\n            //cc.log('srcX:%d', this.srcPos.x);\r\n            //cc.log('startX:%d',event.getStartLocation().x);\r\n            //cc.log(moveX);\r\n        }, this);\r\n        \r\n        this.node.on('touchend', function(event) {\r\n            if(!this.isTurnActive() || this.isAtked())\r\n                return;\r\n            \r\n            var player = this._player;\r\n            var duel = player.duel;\r\n            var opponentPlayer = player._opponentPlayer;\r\n            //var opponentPlayer = player;\r\n            var boundBox, pos, oppoAddX, oppoAddY;\r\n            \r\n            //判断是否移动到对方英雄上\r\n            boundBox = opponentPlayer.heroIconSprite.node.getBoundingBox();\r\n            oppoAddY = player.monsterFieldLayout.x + player.node.x - opponentPlayer.node.x;\r\n            oppoAddY = player.monsterFieldLayout.y + player.node.y - opponentPlayer.node.y;\r\n            pos = new cc.v2(this.node.x+oppoAddX, this.node.y+oppoAddY);\r\n            if(boundBox.contains(pos))\r\n            {\r\n                duel.monsterAtkPlayer(player.fieldArray[this._idx], opponentPlayer);    //攻击玩家\r\n                this.resetPosToSrc();\r\n                return;\r\n            }\r\n            \r\n            //判断是否移动到对方随从上\r\n            var monsterSpriteArray = opponentPlayer.monsterSpriteArray;\r\n            oppoAddX = player.monsterFieldLayout.x + player.node.x - opponentPlayer.node.x - opponentPlayer.monsterFieldLayout.x;\r\n            oppoAddY = player.monsterFieldLayout.y + player.node.y - opponentPlayer.node.y - opponentPlayer.monsterFieldLayout.y;\r\n            //cc.log('opponentPlayer.monsterSpriteArray.length:%d', monsterSpriteArray.length);\r\n            for(var i=0; i<monsterSpriteArray.length; ++i)\r\n            {\r\n                boundBox = monsterSpriteArray[i].getBoundingBox();\r\n                pos = new cc.v2(this.node.x+oppoAddX, this.node.y+oppoAddY);\r\n                if(boundBox.contains(pos))\r\n                {\r\n                    duel.monsterAtkMonster(player.fieldArray[this._idx], opponentPlayer.fieldArray[i]); //攻击对方随从\r\n                    this.resetPosToSrc();\r\n                    return;\r\n                }\r\n            }\r\n            \r\n            //什么都没做，复位\r\n            this.resetPosToSrc();\r\n        }, this);\r\n        \r\n        \r\n    },\r\n    \r\n    //是否激活\r\n    isTurnActive: function() {\r\n        return this._player._isTurnActive;\r\n    },\r\n    \r\n    //本回合是否攻击过\r\n    isAtked: function() {\r\n        var monster = this._player.fieldArray[this._idx];\r\n        return monster.isAtked;\r\n    },\r\n    \r\n    resetPosToSrc: function() {\r\n        this.node.setPosition(this.srcPos.x, this.srcPos.y);\r\n    },\r\n    \r\n    // use this for initialization\r\n    onLoad: function () {\r\n        this.srcPos = {'x':0,'y':0};\r\n\r\n        this.setInputControl();\r\n    },\r\n    \r\n    init: function(monster, player, idx) {\r\n    \r\n        this.hpLabel.string = monster.hp.toString();\r\n        this.atkLabel.string = monster.atk.toString();\r\n        this.nameLabel.string = monster.cardName.toString();\r\n        \r\n        this._player = player;\r\n        this._idx = idx;\r\n    },\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    // update: function (dt) {\r\n\r\n    // },\r\n});\r\n"
  ]
}